11/27/18

glob = *

**/*.py = recursively search through directory for all .py extensions. 

Cpython: 

Jpython: java based python. Forked by Paypal. Running it ontop on the JVM. Stuck on 2.7
Iron Python: Sponsored by Microsoft
Micropython: Python designed to run on microchips. Provides floating point and 64 bit integers with much stricker limitations. Can be run in 16 kb of ram. 
Pypy: Re-write cpython in python. The issue with this is that python is slow. JIT = Just in Time complier. Can be faster than python in certain situations, hot loops. 

Twisted: Networking library. async

1. Iterator and iterable
a = [1, 2, 3]
i = iter(a) # built in function
dir(i) #will list all attributes and methods of that iterator. We are looking for __next__
Check out __iter__ and all the special methods on the python3 

2. Next(..) built in function, .__next__()

3. raise Stopfunction
iterator protocol
1. iter(...) built-in function, .__iter__()
2. next(...) built-in function, .__iter__()
3. Raise Stopiteration 

read_lines() takes it into memory. 

Code can be an executable program or it can be a library. It takes on a dual nature. All of this can be done with __main__

if __main_


python -m pydoc -help 

python -m pydoc -p 5000 # allows you to see web interface at localhost:

currying -> g = functools.partial(funky, d=50)

imap_unordered(we don't care about the order of the results)

deck in the collections module

Amdahl's law - upper limit of mp. 

Check out reverse index, this is how most databasses work. 

Next projects? 

MLB data
1. Screen scrape
2. Baseball API
3. Import a database, csv file maybe? 

1. Get data
2. Create simulation of a baseball season or for a baseball team. 
3. How can we make a real answer? 


Check out turtle as well, good way to make some games. 

Check out testing frameworks as a potential project. Doctest, unittest, hypothesis. 

Counting words. 

Don Knuth 
Doug Mackelroy

stackoverflow sort


python -m idlelib.idle

/Users/Azreal/Downloads/baseballdatabank-master/core/parks.csv

I have played through this game a couple of times now, and I am really impressed with the depth of the story telling. I wouldn't characterize this as a video game, it really is immersive and interactive story telling. The VR is very impressive and maybe some of the best I have seen yet. I hope Blackthorn continues to churn out awesome content like this. 





12/20/18

Fun watch: Andy Andres "Sabermetrics 101: Introduction to Baseball"

Pandas is great for ETL, takes out some of the human element. 

Pandas indexes: Pandas is a column oriented table set. Generally Postgres and others are row based. 

Database, ID, name, age, is_dead
	8 bytes, 32 bytes, 1 byte, 1 bit = 329 bits total. The semi-conducter companies come back and say you get 42 bytes. Eventually up to 44 bytes
	Matchine word - logical notion of a memory segment -> 8 bit bytes, 4 bit nibbles -> 16 bit words -> 32 bit words -> 64 bits

	This is all Row Oriented. It generally sucks

	NUMA - Non-uniform memory access. 

	Eventually it decided that things make more sense to be column oriented. An index is used which improves the memory usage. Contigeous vertical

	Numby is the underlying store in Pandas. Packs everything in nd-array. 

	slow: for row in df:
			t += row['is_dead']
	fast: t = df['is dead'].sum() -> popcount. Super fast! This is highlevel python code. This is actually faster than C 

	Numpy is written in fortran, not c! 

How would you write a query on pandas table where the age of the person is greater than 10? Something like this I think, filter_mask = xl_vals["Date"] < end_date. Why did they do it this way? 

B-Tree index: N-way tree, similar to a Binary Tree which goes 2 directions. 

Sql will build an index. This index will have pointers to rhe rows. Look up the is_dead bit and then add it. 

df[df['age'] >10]['is_dead'].sum() will return a bit array mask like [1, 0, 0, 1, 0, 1, 0] for example. Builds smaller columns. This is optimized in hardware. 

Possible to make this go even faster! (df['is_dead'][df['age'] > 10]).sum()

Google creates a sparse matrix, they don't use row or column based dbs. 

DB browser for SQLlite: Think about how to model this data. Very different things in terms of what's actually possible. 

All databases are supposed to identity themselves by four properties: Atomicity, Consistency, Isolation, Durability (ACID)

SQLlite: Very course, only one person can write at a time. MyIsam was the default for MYsql until 2009. Would only lock tables. Replaced by InnoDB which more ACID complient. 
Postgres has been the same throughout. If you ripped the powerout on Postgres, and plugged it back in, 

Sqllite: locks entire db. 
Myisam: Locks tables
Postgres: lock individual rows

There are other data stores which lock only single fields. Can result in dead-lock. 

Grant's code is on the dropbox: Check out zipfile, and pathlib. 

pre-check, skip-check, setup, work, cleanup, post-check 

Spark and Hadoop are both totally different style data bases. 


Checkout ipython as well, might be better for development. %history gives you everything you typed, copy and paste it in, re-factor into functions. 

%history ~2/1-100 (this is a magic command, %magic will talk about all of these)

ls will try to run this as python code, but if it fails, it will run the 'magic' version of it. 

def swap(a, b):
	a, b = b, a #tuple unpacking
	return a, b
dis.dis(sqa)

%timeit: superuseful. Creates complete testing environment, disables the garbage collector. It will run your code a million times. IF you have an an error in your code, you will watch that unfold. 

!ls = command in ipython. You can combine bash stuff, and python stuff! 

Feedback on the code: 
Use a with statement in order to close the connection to the db

Simulate a game of baseball! How would that work? Count RBIs, 4 bases. Most likely a poisson distribution. Bonus points for making this fast! How do you persist that information? 



1/18/19

Baseball Sims, very difficult to test. How do you test if the model is failing or regressing? 

Grant's baseball sim: Using nonlocal, calling a function inside of a function. 

Checkout python-requests.org. Grant copied that format. 

John cook running statistics. Grant turned that a python script. Gorilla. 


Nonlocal: can be used to bind value in a nonlocal scope(enclosing) rather than have it come from the locals. Mutuate the locacl scope of the parent function. Mutate the variables. 
Why do it this way? To save memory. Doing it the way I would have done it would have resulted in more memory usage. 

_ is generally used because the variable itself isn't used anywhere. 

pylint: Database of best practices, some of those are syntax, some are used for best practices. Warnings can be turned on or off. Pylint will generate an rc file.
We tell the RC file what we care about and what should be addressed.  

Make a swiss army knife package, see gj on git hub. adding package to pypi. 

Check out Sphinx: Tool for making python documentation. Used on the complete python docutmention. 

Syphinx has something called extensions, a good example of this is Autodoc. 

Doctest will make sure that the docstring you create is actually true. You can possible get full coverage from doctest. 
You can embed in these docstrings too. 

For Data: Record and replay. Capture all inputs and outputs from the system. 
For exisiting inputs, should it return the same output. 

unittest.mock - this could blow your mind. Build me an object that will do anything I bid it to. 

unittest.mock.patch - I would like to create an alternative reality. 



TO DO: 
- Read through mock
- Add more to the baseball sim! Check out Grant's code. 
- Check out pylint.
- Consider making own module, python/gj pypi.com
